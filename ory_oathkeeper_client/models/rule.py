# coding: utf-8

"""
    ORY Oathkeeper

    ORY Oathkeeper is a reverse proxy that checks the HTTP Authorization for validity against a set of rules. This service uses Hydra to validate access tokens and policies.

    The version of the OpenAPI document: v0.40.8
    Contact: hi@ory.am
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ory_oathkeeper_client.models.rule_handler import RuleHandler
from ory_oathkeeper_client.models.rule_match import RuleMatch
from ory_oathkeeper_client.models.upstream import Upstream
from typing import Optional, Set
from typing_extensions import Self

class Rule(BaseModel):
    """
    Rule
    """ # noqa: E501
    authenticators: Optional[List[RuleHandler]] = Field(default=None, description="Authenticators is a list of authentication handlers that will try and authenticate the provided credentials. Authenticators are checked iteratively from index 0 to n and if the first authenticator to return a positive result will be the one used.  If you want the rule to first check a specific authenticator  before \"falling back\" to others, have that authenticator as the first item in the array.")
    authorizer: Optional[RuleHandler] = None
    description: Optional[StrictStr] = Field(default=None, description="Description is a human readable description of this rule.")
    id: Optional[StrictStr] = Field(default=None, description="ID is the unique id of the rule. It can be at most 190 characters long, but the layout of the ID is up to you. You will need this ID later on to update or delete the rule.")
    match: Optional[RuleMatch] = None
    mutators: Optional[List[RuleHandler]] = Field(default=None, description="Mutators is a list of mutation handlers that transform the HTTP request. A common use case is generating a new set of credentials (e.g. JWT) which then will be forwarded to the upstream server.  Mutations are performed iteratively from index 0 to n and should all succeed in order for the HTTP request to be forwarded.")
    upstream: Optional[Upstream] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["authenticators", "authorizer", "description", "id", "match", "mutators", "upstream"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Rule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authenticators (list)
        _items = []
        if self.authenticators:
            for _item in self.authenticators:
                if _item:
                    _items.append(_item.to_dict())
            _dict['authenticators'] = _items
        # override the default output from pydantic by calling `to_dict()` of authorizer
        if self.authorizer:
            _dict['authorizer'] = self.authorizer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of match
        if self.match:
            _dict['match'] = self.match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mutators (list)
        _items = []
        if self.mutators:
            for _item in self.mutators:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mutators'] = _items
        # override the default output from pydantic by calling `to_dict()` of upstream
        if self.upstream:
            _dict['upstream'] = self.upstream.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Rule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticators": [RuleHandler.from_dict(_item) for _item in obj["authenticators"]] if obj.get("authenticators") is not None else None,
            "authorizer": RuleHandler.from_dict(obj["authorizer"]) if obj.get("authorizer") is not None else None,
            "description": obj.get("description"),
            "id": obj.get("id"),
            "match": RuleMatch.from_dict(obj["match"]) if obj.get("match") is not None else None,
            "mutators": [RuleHandler.from_dict(_item) for _item in obj["mutators"]] if obj.get("mutators") is not None else None,
            "upstream": Upstream.from_dict(obj["upstream"]) if obj.get("upstream") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


